<h1>About</h1>
<p>41023213</p>
<p>課程名稱: 協同產品設計實習 - Collaborative Product Design Practice</p>
<p>學員作業網站: <a href="https://mdecd2025.github.io/hw-41023213/">https://mdecd2025.github.io/hw-41023213/</a></p>
<p>學員作業倉儲: <a href="https://github.com/mdecd2025/hw-41023213">https://github.com/mdecd2025/hw-41023213</a></p>
<hr/>
<p>課程代號: cd2025</p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入<span> </span><a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a><span> </span>Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span>p5z4eku</span></p>
<hr/>
<p>課程評分:</p>
<p style="padding-left: 30px;">Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單</p>
<p style="padding-left: 30px;">Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單</p>
<p style="padding-left: 30px;">Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單</p>
<p></p>
<h1>Tasks</h1>
<p>task1 與 task2 任務目的在建立可於近端維護個人作業與協同作業的準備工作:</p>
<p>task1 (自行製作可攜程式系統)</p>
<p>task2 (使用 SSH 協定執行作業倉儲的推送)</p>
<p>task3 與 task4 則為 HW2 的內容之一</p>
<p>task3 (使用 Solvespace 建立平面四連桿系統零組件)</p>
<p>task4 (使用 Onshape 建立平面四連桿系統零組件)</p>
<p>task5 與 task6 則為 HW3 的主要內容</p>
<p>task5 (Webots Tutorial 1 ~3)</p>
<p>task6 (Webots Tutorial 4 ~6)</p>
<h2>task1</h2>
<h4>自行製作可攜程式系統</h4>
<p>利用 C:\Portable_2023_fall 啟動舊版的可攜程式環境, 目的是要藉由舊版的 Python 執行 <a href="https://mdecd2025.github.io/hw-scrum-1/downloads/gen_p3132.py">gen_p3132.py</a>, 取得基本的 Python 後, 修改 start.bat, 以 Python313 啟動可攜.</p>
<p>之後利用 Python 3.13.2 在命令列執行<span> </span><a href="https://mdecd2025.github.io/hw-scrum-1/downloads/get-pip.py">get-pip.py</a>, 以便安裝 pip.exe.</p>
<p>之後利用新版的 SciTE, Portablegit, PUTTY, ShareX, Wink 以及原有的 tmp 及 home_ipv6, 以新的<span> </span><a href="https://mdecd2025.github.io/hw-scrum-1/downloads/start.bat">start.bat</a><span> </span>啟動.</p>
<p>以下為操作影片, 採用C: 中的 Python 3.11 舊系統自製 Python 3.13.2 為主的新可攜程式環境.</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/G9ZYGrqOgJ0" title="YouTube video player" width="560"></iframe></p>
<p></p>
<h3>list</h3>
<p>以下將要嘗試利用程式方法列出學員的作業倉儲與網頁連結, 以及各分組的倉儲及網站連結.</p>
<p>已知的兩段程式 (<a href="https://mde.tw/cd2025/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9f3df9d865a7ceca8e799ee9b1a31602/raw/2793a8a65bd810e9837e0d00ca3e2105d3d5da9c/list_stage_1.py">1</a>,<span> </span><a href="https://mde.tw/cd2025/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9f3df9d865a7ceca8e799ee9b1a31602/raw/2793a8a65bd810e9837e0d00ca3e2105d3d5da9c/list_stage_2.py">2</a>), 可以讀取 <a href="https://mde.tw/list/2b.txt">https://mde.tw/list/2b.txt</a> (<a href="https://github.com/mdecycu/list">https://github.com/mdecycu/list</a>), 並且各學員的學號與　Github 帳號是利用 Tab 隔開.</p>
<p><a href="https://mdecd2025.github.io/hw-41023213/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9f3df9d865a7ceca8e799ee9b1a31602/raw/29173e8b73ad422fd7c44bcd93658a3579d63633/list_stage_3.py">列出 2b 學員作業網站與倉儲連結</a></p>
<p><a href="https://mdecd2025.github.io/hw-41023213/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9f3df9d865a7ceca8e799ee9b1a31602/raw/a4414e311503fac8d57d4f5e44999147c54cf7fa/list_2b_group.py">列出 2b 分組網站與倉儲連結</a></p>
<p><a href="https://mdecd2025.github.io/hw-41023213/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9f3df9d865a7ceca8e799ee9b1a31602/raw/48af059c96052719dc03d5fe8ee8af9a6033afc7/w4_2b_ipv6_stud_num.py">列出 2b IPv6 port 8000 連線列表</a></p>
<p>組員個人網站:</p>
<p>41023215：<a href="https://mdecd2025.github.io/hw-41023215/">https://mdecd2025.github.io/hw-41023215/</a></p>
<p>41023216：<a href="https://mdecd2025.github.io/hw-41023216/">https://mdecd2025.github.io/hw-41023216/</a></p>
<p>41023213：<a href="https://mdecd2025.github.io/hw-41023213/">https://mdecd2025.github.io/hw-41023213/</a></p>
<p>41071203：<a href="https://mdecd2025.github.io/hw-41071203/">https://mdecd2025.github.io/hw-41071203/</a></p>
<p>41071204：<a href="https://mdecd2025.github.io/hw-41071204/">https://mdecd2025.github.io/hw-41071204/</a></p>
<p>41071202：<a href="https://mdecd2025.github.io/hw-41071202/">https://mdecd2025.github.io/hw-41071202/</a></p>
<hr/>
<p><span>組員個人</span>倉儲：</p>
<p><span>41023215</span>：<a href="https://github.com/mdecd2025/hw-41023215">https://github.com/mdecd2025/hw-41023215</a></p>
<p><span>41023216</span>：<a href="https://github.com/mdecd2025/hw-41023216">https://github.com/mdecd2025/hw-41023216</a></p>
<p><span>41023213</span>：<a href="https://github.com/mdecd2025/hw-41023213">https://github.com/mdecd2025/hw-41023213</a></p>
<p><span>41071203</span>：<a href="https://github.com/mdecd2025/hw-41071203">https://github.com/mdecd2025/hw-41071203</a></p>
<p><span>41071204</span>：<a href="https://github.com/mdecd2025/hw-41071204">https://github.com/mdecd2025/hw-41071204</a></p>
<p><span>41071202</span>：<a href="https://github.com/mdecd2025/hw-41071202">https://github.com/mdecd2025/hw-41071202</a></p>
<p></p>
<p>2b 第8組網站:<span> </span><a href="https://mdecd2025.github.io/2b-g8/">https://mdecd2025.github.io/2b-g8/</a></p>
<p>2b 第8組倉儲:<span> </span><a href="https://github.com/mdecd2025/2b-g8">https://github.com/mdecd2025/2b-g8</a></p>
<h2>task2</h2>
<h4>使用 SSH 協定執行作業倉儲的推送</h4>
<p><a href="https://zh.wikipedia.org/zh-tw/Secure_Shell">SSH</a><span> </span>是一種加密的網路傳輸協定, PuTTY 則是可用於 Windows 環境的 SSH 協定工具, 其中支援遠端登入 (putty.exe) 與檔案傳輸工具 (psftp.exe).</p>
<p>使用 PuTTY 所建立的公私鑰進行 Github push 認證的步驟:</p>
<p>第一步:</p>
<p>若希望在 Windows 環境透過 git 指令, 使用 PuTTY 設定的 session (一個代表連線伺服器主機、私鑰位置與是否使用代理主機等資訊的字串), 執行 push, 必須要在啟動可攜環境時, 設定 GIT_SSH 環境變數, 將此變數指向 PuTTY 套件中的 plink.exe 位置 (也就是 set GIT_SSH=%Disk%:\putty\plink.exe).</p>
<p>第二步:</p>
<p>指定利用 PuTTY 的 SSH session 執行 git push 後, 必須在 Windows 操作系統中選擇一個字串, 作為 SSH 連線 session 名稱, 由於此設定必須指向 SSH 協定加密用的私鑰所在目錄位置, 因此設定 session 之前, 必須利用 puttygen.txt 建立一對公私鑰, 其中的公鑰為 OpenSSH 格式, 必須送到使用者 Github 帳號設定區 (Settings) 的 SSH and GPG keys 中.</p>
<p>第三步:</p>
<p>利用 puttygen.exe 建立公私鑰的方法, 是在執行 puttygen.exe 之後, 以滑鼠按下 Generate 之後, 讓滑鼠在 puttgen.exe 視窗中 key 下方的空白區域隨意移動, puttygen.exe 會根據滑鼠移動的位置隨機建立 OpenSSH 格式的公鑰, 以及配對的 PuTTY 格式的 Private Key (副檔名為 .ppk)</p>
<p>第四步:</p>
<p>接下來, 將 OpenSSH 格式的 Public Key 內容複製到個人 Github 帳號設定區的 SSH and GPG keys 中, 並以 puttygen.exe 執行視窗右下方的 Save private key 按鈕, 將私鑰 (假設為 myprivatekey.ppk) 存至 Y:\.</p>
<p>第五步:</p>
<p>接著啟動 PuTTY 中的 putty.exe, 在 Host Name (or IP Address) 欄位填入 github.com, 並確認 Connection Type 選用 SSH, 表示要透過 SSH 加密協定連線到 github.com.</p>
<p>第六步:</p>
<p>接著在 putty.exe 視窗下方的 Saved Sessions 填入一組字串, 此字串就是之後要遠端登入 github.com 設定 push 連線 URL 的 session 名稱, 在此假設選擇 "mysession" 作為 session 名稱, 使用者可以自行選擇具有代表性的字串, 例如: 學號或簡短的英文姓名縮寫.</p>
<p>第七步:</p>
<p>在 putty.exe 視窗中填入 github.com 與 "mysession" 名稱之後, 點擊 Save 之後, 此 session 設定就會被 Windows 操作系統存入該台電腦的 Registry 登錄檔案中的 HKEY_CURRENT_USER - SOFTWARE - SimonTatham 所在組態區. 此時可以在命令列中輸入 regedit 後進入登錄檔查看是否 mysession 已經存在.</p>
<p>第八步:</p>
<p>上列 "mysession" 設定完成且按下 Save 之後, 若再按下 Open, 採用 IPv4 網路連線的電腦應該已經可以透過 putty.exe 遠端連線至 github.com, 視窗中會出現 github.com 作為視窗標題, 且內容為 login as: 但一般使用者並沒有帳號可以直接透過 putty.exe 遠端登入到 github.com, 而只能在 session 設定完成後, 利用此 session 執行 git push.</p>
<p>第九步:</p>
<p>由於前面的 "mysession" 雖然已經存入 Windows 操作系統的登錄檔, 但並沒有設定 private key 的位置, 因此接下來要再開啟 putty.exe, load 進此一 session, 然後在此 session 設定左方的 Category: 下方的 Connection - SSH - Auth - Credentials 設定中的 Private key file for authentication: 區, 利用 Browse 選擇位於 Y:\ 的 myprivatekey.ppk 檔案. 選擇檔案完成後, 必須再回到 Catetory: 下方的 Session 區, 以右方的 Save 將附加私鑰位置設定的 session 存檔. 此時 Windows 登錄檔中的 "mysession" 除了代表要使用 SSH 連線到 github.com 之外, 還附帶指定了 myprivatekey.ppk 在 Y:\ 的位置.</p>
<p>第十步:</p>
<p>若上述設定是在電腦輔助設計室中的電腦進行, 必須利用命令列 regedit 指令, 進入 HKEY_CURRENT_USER - SOFTWARE - SimonTatham 位置, 利用滑鼠右鍵將此登錄設定檔案"匯出" 存入可攜程式 start_ipv6.bat 所在目錄, 此處假設命名為 mysession.reg, 使用者可以自行對 .reg 命名.</p>
<p>第十一步:</p>
<p>由於上列的 myprivatekey.ppk 存於可攜程式中的 Y:\, 因此當使用者利用 start_ipv6.bat 啟動可攜程式後, 就可以利用滑鼠雙點擊位於同目錄的 mysession.reg, 上述的 "mysession" 設定就會存入 Windows 操作系統的登錄檔中.</p>
<p>使用 PuTTY session 設定倉儲 .git/config 中的 URL</p>
<p>假設上列 "mysession" 對應中的 OpenSSH 格式公鑰是送到 Github 帳號為 scrum-1 學員的 SSH and GPG key 區域, 則 scrum-1 學員在啟動可攜系統後, 已經雙點擊 mysession.reg, 將前述 putty.exe 設定的 session 組態登錄設定回存至 Windows 操作系統中, 則 scrum-1 學員就可以將其近端作業倉儲中的 mysession 用於倉儲 .git/config 檔案的下方設定:</p>
<div>
<div class="syntaxhighlighter js" id="highlighter_407269">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="js plain">[remote </code><code class="js string">"origin"</code><code class="js plain">]</code></div>
<div class="line number2 index1 alt1"><code class="js spaces">    </code><code class="js plain">url = git@mysession:mdecd2025/hw-scrum-1.git</code></div>
<div class="line number3 index2 alt2"><code class="js spaces">    </code><code class="js plain">fetch = +refs/heads/:refs/remotes/origin/</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>其中的 [remote "origin"] 表示當使用 git 指令中針對此倉儲 "origin" 是一個與遠端倉儲對應的字串代號, 代表其下兩項設定. url 代表此 "origin" 的倉儲連線網址, 而連線至此倉儲的協定是採遠端登入 (使用 Github 支援的 SSH 遠端登入協定), 且此遠端登入的帳號為 "git", 這是所有要使用 SSH 執行 git push 的用戶共同使用的登入帳號.</p>
<p>url 設定中 "@" 之後的 "mysession" 就是宣告要使用此電腦登錄檔中所設定的 session 名稱 (代表要連線到 github.com, 且帶的 myprivatekey.ppk, 準備在登入流程中與 github.com 中 mdewcm2025 帳號下的 hw-scrum-1 倉儲擁有者 (或帶有 repo 管理權限的帳號) 所登錄的 public keys 進行認證比對, 一旦通過認證, git push 指令就可以成功將改版資料推送到指定的倉儲區域.</p>
<h3>IPv6</h3>
<p>IPv6 設定:<br/>2b 各學員固定 IPv6 分配: 2001:288:6004:17:fff1:cd25:0000:b001<br/>gateway: 2001:288:6004:17::254<br/>dns server:<br/>2001:288:6004:17::3<br/>2001:b000:168::1</p>
<p></p>
<p>2b 以 <a href="https://mdecd2025.github.io/hw-scrum-1/downloads/w4_2b_index.txt">w4_2b_index.txt</a> 中的序號為準, 例如: 序號為 1 的學員其固定 IPv6 位址為:</p>
<p><span>2001:288:6004:17:fff1:cd25:0000:b001</span></p>
<p><span>若序號為 66 其 IPv6 位址為 2001:288:6004:17:fff1:cd25:0000:b066</span></p>
<p></p>
<p></p><h2>task3</h2>
<p><strong>使用 Solvespace 建立平面四連桿系統零組件 (HW2)</strong></p>
<p><span>base</span></p>
<p><strong><img alt="" height="100" src="/images/base.png" width="100"/></strong></p>
<p><span>link1</span></p>
<p><strong><img alt="" height="100" src="/images/link1.png" width="360"/></strong></p>
<p>link2</p>
<p><strong><img alt="" height="100" src="/images/link2.png" width="339"/></strong></p>
<p>link3</p>
<p><img alt="" height="100" src="/images/link3.png" width="411"/></p>
<p><span>shaft1</span></p>
<p><img alt="" height="100" src="/images/shaft1.png" width="159"/></p>
<p><span>shaft2</span></p>
<p><img alt="" height="100" src="/images/shaft2.png" width="121"/></p>
<p><span>fourbar assembly</span></p>
<p><img alt="" height="200" src="/images/assembly.png" width="305"/></p>
<h2>task4</h2>
<h3>W4</h3>
<p>下載<span> </span><a href="http://229.cycu.org/cmsimde_w4.7z">cmsimde_w4.7z</a>, 解開壓縮檔案後, 替換倉儲中的 cmsimde 目錄.</p>
<p><span>更改 init.py 中將 ip 設為所分配的<span> </span><a href="https://mde.tw/cd2025/content/IPv6.html">IPv6 address</a>.</span></p>
<p><span><img alt="" height="272" src="/images/ipv6.png" width="265"/></span></p>
<h3>w5</h3>
<p dir="auto">在 Webots 中利用簡單的 box 物件建立 link, 利用 HingeJoint 建立 旋轉軸, 並且利用 Python controller 程式控制 link 的旋轉, 以下的模擬場景為可分別針對 link1, link2, link3 控制旋轉的 Open chain 運動模型, 請各組接續完成 Closed chain 的 box 四連桿運動場景. 完成後請詳細說明各連接桿與連接軸的設定步驟, 將說明以及操作影片分別放入個人與分組的倉儲及網頁中.</p>
<p dir="auto">平面四連桿的尺寸設計: 固定桿長度為 1m, 主動旋轉桿長度為 0.4m, 第二旋轉桿長度為 0.6m, 第三旋轉桿長度為 0.9m.</p>
<p dir="auto">工具: Webots R2025a, Solvespace 3.1, Python 3.13.2, 可攜程式環境 wcm2025</p>
<p dir="auto">模擬結果如下:</p>
<p dir="auto"><img alt="" height="270" src="/images/2025-04-08 10-46-33.gif" width="480"/></p>
<p dir="auto"><a href="/downloads/fourbar.zip">fourbar</a></p>
<p dir="auto"><a href="/downloads/fourbar_ex.zip">fourbar_ex</a></p>
<h3>w6</h3>
<p>利用solvespace建立fourbar shooter零件</p>
<p><a href="/downloads/fourbar shooter_solvespace.rar">fourbar shooter_solvespace</a></p>
<p><img alt="" height="400" src="/images/fourbar shooter.png" width="400"/></p>
<p></p>
<h2>task5</h2>
<h3>w7</h3>
<p>建立過程中的要點:</p>
<p>運作零件必須設定 boundingObject 與 physics 才能透過 solidReference 進行 dynamics 聯立運算</p>
<p>link 的 boundingObject , 可以透過其 link Shape 採 USE 的方式重用.</p>
<p>joint4 的旋轉中心則透過 solidReference 與 link3 的端點座標重合, 才能完成 closed chain 的動力約束條件模擬.</p>
<p><img alt="" height="300" src="/images/fourbar shooter.gif" width="400"/></p>
<ol></ol>
<p><a href="https://mdecd2025.github.io/hw-scrum-1/downloads/fourbar_shooter_w7.7z">fourbar shooter</a></p>
<h3>w8</h3>
<p>根據<span> </span><a href="https://cyberbotics.com/doc/reference/solidreference">SolidReference</a><span> </span>節點的用法說明, SolidReference 可以用在 Joint 節點的 endPoint 欄位中，用來指向一個現有的 Solid 或靜態環境 static environment。通過這種方式，可以閉合機械迴圈。當指向一個 Solid 時，唯一的限制是 Solid 和 Joint 必須是同個<span>上層</span> <span>Solid (base)</span> 的<span>後代</span>。</p>
<p>第一個情況，若 joint4 設置在 base link 的最右端，然後將 joint4 的 endPoint 欄位，設為 SolidReference 指向 link3，即可符合 Soild (link3) 與 Joint (joint4) 都是某個共同上層 Solid (base) 的後代。</p>
<p><img alt="" height="151" src="/images/joint4 to base.png" width="312"/></p>
<p></p>
<p>第二個情況，<span>若</span> joint4 設置在 link3 的末端，然後將 joint4 的 endPoint 欄位指向 static environment，讓 link3 的末端固定在 ground (其作用與固定在 base 節點相同)。</p>
<p><img caption="false" height="182" src="/images/joint4 to link3.png" width="317"/></p>
<p><span> &lt;static environment&gt;：指的是不動的參考框架（例如地面或固定基座）</span></p>
<p><span></span></p>
<p>情況一: <a href="https://mde.tw/cd2025/downloads/fourbar_box.7z">fourbar_box.7z</a><span> </span></p>
<p>情況二: <a href="https://mde.tw/cd2025/downloads/fourbar_box_w8.7z">fourbar_box_w8.7z</a> </p>
<h2>task6</h2>
<h3>Shooter</h3>
<p>截至目前, 已經從<span> </span><span><a href="https://mdecd2025.github.io/hw-scrum-1/downloads/basketball_game_w13.7z">basketball_game_w13.7z</a></span><span> </span>得知如何利用平面四連桿機構進行投籃動作, 並在球通過籃框時註記得分, 也知道如何利用 supervisor 模式憑空產生球, 也能設法透過 supervisor 中的 emitter 將命令訊號送給 robot 中的 receiver.</p>
<p>其次, <a href="https://mdecd2025.github.io/hw-scrum-1/downloads/three_digit_counter.7z">three_digit_counter.7z</a><span> </span>中利用物件的 material 顏色的改變, 建立了一個三位數的七段顯示器模擬.</p>
<p>而<span> </span><a href="https://mde.tw/cd2025/downloads/youbot_cart_w10.7z">youbot_cart_w10.7z</a><span> </span>提供一台可以利用鍵盤靈活操控的平台車.<span> </span><a href="https://mde.tw/cd2025/downloads/youbot_cart_w12.7z">youbot_cart_w12.7z</a><span> </span>則驗證無論是在平台車上自行利用 box 或從 CAD 輸入同樣大小的零件, 可以取得相同的結果.</p>
<p>至於<span> </span><a href="https://mde.tw/cd2025/downloads/youbot_cart_w10_websocket.7z">youbot_cart_w10_websocket.7z</a><span> </span>則驗證儘管 Webots 本身並沒有提供如 CoppeliaSim 的 Websocket Remote API 模組, 設計者仍可自行利用 Websocket 架構, 編寫 client 與 server 應用程式, 在 Webots WWW 場景串流的模式下, 讓多人可以透過瀏覽器檢視伺服器中的場景, 並利用 Websocket client 端程式發送命令, 要求 Websocket server 端的協同程式控制 Webots 場景中的物件作動.</p>
<p>最後從<span> </span><a href="https://mde.tw/cd2025/content/Tutorial7.html">Tutorial7</a><span> </span>中得知, 要在協同產品設計流程中, 將前述各場景物件、感測器與控制程式整合成為一個能夠計時、計分且由兩位以上組員分別控制投籃動作以及籃框的移動, 最好的方式就是將各組成物件, 分別由協同組員設法建立為<span> </span><a href="https://cyberbotics.com/doc/reference/proto">PROTO</a><span> </span>物件之後, 再依各物件尺寸比例、座標系統方位、supervisor 監控、Websocket 遙控及各物件的控制程式進行協同分工後, 便可依循<span> </span><a href="https://mdecd2025.github.io/hw-scrum-1/downloads/ballShooter.7z">ballShooter.7z</a><span> </span>中的射球機構<span> </span><a href="https://cyberbotics.com/doc/reference/proto">PROTO</a><span> </span>方式, 完成投籃遊戲系統場景的設置與模擬.</p>
<p>待完成事項:</p>
<ol>
<li>在場景中放入記分板, 必須採 supervisor 模式改變七段顯示器物件的顏色</li>
<li>在籃框加入感測器, 若球入網可以將得分顯示在 supervisor 模式控制的計分板上</li>
<li>將 <a href="https://mdecd2025.github.io/hw-scrum-1/downloads/youbot_cart_w15.7z">youbot_cart_w15.7z</a> 的 w15_shooter_stand_feed_ball.wbt 場景中的籃框平台車, 套用<span> </span><a href="https://mde.tw/cd2025/downloads/youbot_cart_w10_websocket.7z">youbot_cart_w10_websocket.7z</a> 程式控制,<span> </span>改為 Websocket 模式, 籃框移動由 client 端進行控制</li>
<li>將目前可以自由移動的籃框平台車, 改為只能面對場域中心點為圓心進行圓周運動</li>
</ol>
<h1>Homework</h1>
<p>作業 (30%)</p>
<p>HW1 (5%): <span style="background-color: #ffff00;">建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">part1:</p>
<p style="padding-left: 60px;">請各學員在 USB 隨身碟或個人電腦上完成 cd2025 課程所需的可攜系統配置:</p>
<p style="padding-left: 90px;">下載 <a href="http://229.cycu.org/portable_wcm2025.7z">portable_wcm2025.7z</a> (330MB, 解開壓縮後 1.4GB)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a.7z">Webots_2025a.7z</a> (1.5 GB, 解開後約為 2.9GB, 可單獨運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a_web.7z">Webots_2025a_web.7z</a> (171 MB, 解開壓縮後約為 1GB, 必須連網運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Blender4.2.7z">Blender4.2.7z</a></p>
<p style="padding-left: 30px;">part2:</p>
<p style="padding-left: 60px;">請各學員完成可攜程式系統配置後, 利用 Webots R2025a 中寬度與高度都為 0.1m 的 box 物件建立一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 60px;">base (基座) 長度 1m, link1 長度 0.4m, link2 長度 0.6m, link3 長度 0.9m, 各轉軸均為 HingeJoint, joint1 旋轉速度設定為 1radian/sec.</p>
<p style="padding-left: 30px;">part3:</p>
<p style="padding-left: 60px;">模擬場景啟動後, 按下 s 鍵機構開始作動, 按下 p 鍵後機構暫停.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2025_hw1_demo.7z">cd2025_hw1_demo.7z</a></p>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">各學員請利用 CAD 系統依據 HW1 的連桿尺寸與運動方式, 配置適當大小的旋轉軸以及基座後, 利用 Webots R2025a 完成一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/fourbar_slvs.7z">fourbar_slvs.7z</a></p>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p style="padding-left: 30px;">請各分組利用CAD 系統建立一個能在電腦桌 (1600W X 700D X 740H mm) 上運作的投籃機構 (<a href="https://www.youtube.com/watch?v=LloG_Jn_TI0&amp;t=51s">參考影片</a>)後, 導入 Webots R2025a 套件, 建立一個能由使用者透過鍵盤按鍵操作, 且具備計分板的籃球遊戲機模擬系統.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p>參考資料:</p>
<p style="padding-left: 30px;"><a href="/downloads/fourbar_ball_throwing_linkage.slvs">fourbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><a href="/downloads/sixbar_ball_throwing_linkage.slvs">sixbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><img alt="" height="264" src="/images/fourbar_ball_throwing_linkage.gif" width="400"/></p>
<h2>HW1</h2>
<p>HW1 (5%): <span style="background-color: #ffff00;">建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW1 - 41023213</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="360" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/-rZfPiUdcqw" title="國立虎尾科技大學 - 機械設計工程系 - cd2025 HW1 - 41023213" width="640"></iframe></p>
<p></p>
<p><span>過程與心得:</span></p>
<p><span>建立solid使用shape生成base並調整尺寸顏色<br/>建立hingejoint(1、2、3)&gt;solid link(1、2、3)並在各零件分支透過pose&gt;shape調整尺寸顏色<br/>各連桿都要透過jointparameters定位旋轉軸位置<br/>link1、2、3需要開啟boundingobject pose和physics<br/>建立hingejoint4旋轉軸位置為link3與base連接點<br/>使用solidreference使該旋轉軸導向link3<br/>joint1的device建立motor<br/>使用controller選擇程式導入</span></p>
<p><span>分支容易漏掉物理或碰撞體積，旋轉軸位置需要準確不然連桿會偏移</span></p>
<p><span><a href="/downloads/HW1_41023213.rar">HW1_41023213</a></span></p>
<p><span></span></p>
<p><span>相關問題</span></p>
<p><span><a href="https://mde.tw/cd2025/content/Stage1.html">https://mde.tw/cd2025/content/Stage1.html</a><span> </span></span></p>
<p>1. 在製作 HW1 之前是否實際練習 Tutorial1 與 Tutorial2？<br/>是</p>
<p>2. Webots 是什麼樣的軟體？它主要用途為何？<br/>Webots 是一套開源的 3D 機器人模擬平台，用來建構虛擬世界、設計機器人、模擬感測器與致動器，並進行機器人控制程式的開發與測試，常用於教育與研究。</p>
<p>3. 在 Tutorial1 中，學習者需要操作的主要機器人模型名稱是什麼？<br/>e-puck 機器人，是一種小型、輪型移動機器人，配備有紅外線感測器與輪型馬達。</p>
<p>4. 如何在 Webots 中建立並執行一個新的模擬世界（world）？<br/>可透過 File &gt; New World 建立新模擬世界，於場景樹中新增地板、機器人與物件，儲存為 .wbt 檔後，點擊「播放」按鈕執行模擬。</p>
<p>5. 請說明如何讓機器人在模擬中移動，並指出相關的程式控制方式。<br/>在控制器程式中，需透過 robot.getDevice() 取得馬達控制器並設為 setPosition(float('inf'))，然後使用 setVelocity() 指定速度以控制移動。</p>
<p>6. Tutorial1 中，學習者需要修改哪些參數或檔案來控制機器人的行為？<br/>主要修改控制器程式碼中的速度參數（馬達轉速）與感測器啟用設定，控制機器人移動或反應行為。</p>
<p>7. 請簡述 Webots 控制器（controller）的功能及其與機器人的關係。<br/>控制器是機器人的「大腦」，負責接收感測器資料、進行邏輯運算、並下達馬達等致動器的控制指令；每個機器人對應一個控制器。</p>
<p>8. 在 Tutorial2 中，機器人需要完成什麼樣的任務或行為？<br/>實作避障行為：透過紅外線感測器偵測物體，當偵測到前方有障礙時改變前進方向。</p>
<p>9. Webots 中的 "Supervisor" 是什麼？它與一般機器人控制器有何不同？<br/>Supervisor 是特殊控制器，可操控整個模擬環境，如重設位置、生成物件、監控狀態。與一般機器人控制器不同的是，它不受限於單一機器人。</p>
<p>10. 請說明如何在 Webots 中進行感測器數據的讀取與應用（例如距離感測器、攝影機）。<br/>使用 getDevice() 取得感測器，再呼叫 enable(timestep) 啟用。接著可在主迴圈中透過 getValue() 取得感測資料。</p>
<p>11. 若要延伸 Tutorial2 讓機器人具備自主避障能力，你會怎麼設計與實作？<br/>設計邏輯判斷左右感測器讀值，若某側值過高（表示接近障礙），即控制馬達轉向避開該方向；可加入非對稱轉動策略以模擬更智慧的避障。</p>
<p>12. 請說明 Webots 中「時間步長（timestep）」的意義，以及它對模擬的影響。<br/>時間步長是模擬更新的間隔時間（毫秒），會影響模擬精度與效能。過小會增加負擔，過大可能導致物理或控制不穩定。</p>
<p>13. 如何在 Webots 中為機器人新增感測器？請說明基本步驟。<br/>在 .wbt 檔中（或 PROTO 中）編輯場景樹，於機器人節點下新增感測器節點（如 DistanceSensor），並指定名稱，在程式中對應讀取即可。</p>
<p>14. 請說明如何將 Webots 控制器程式從 Python 改為 C 語言，並指出相關設定。<br/>建立新的 C 控制器檔案（.c），以 controller C API 撰寫邏輯。到機器人屬性中設定 controller 欄位為該 C 控制器名稱，並在 Makefile 編譯。</p>
<p>15. Tutorial1、2 中，若控制器程式有語法錯誤時，Webots 會如何反應？學員該如何排除？<br/>控制器將無法啟動，Webots console 會顯示錯誤訊息（紅字）。應根據錯誤提示修正語法，如變數未定義、括號錯誤等。</p>
<p>16. 如何將 Webots 世界（world）或機器人設定檔分享給他人，確保對方可順利開啟模擬？<br/>打包 .wbt 世界檔、控制器程式碼、PROTO 檔案與資源檔（textures、sounds 等），可壓縮為 zip 或上傳 GitHub 提供完整路徑。</p>
<p>17. 如果想讓機器人在模擬時產生聲音或播放音樂，Webots 提供哪些方法？<br/>可使用 Speaker 節點，控制器中透過 speaker.playSound() 播放聲音檔案（支援 .wav、.mp3）。需先將音檔加入專案目錄。</p>
<p>18. 請說明如何在 Webots 中同時操作多個機器人，並讓它們各自執行不同控制器。<br/>新增多個機器人節點，為每個指定不同控制器檔案，在各自程式中控制其行為。需在 world 檔與控制器資料夾下妥善配置。</p>
<p>19. 在 Webots 控制器中，如何獲得機器人的當前座標位置與朝向？<br/>使用 Supervisor 控制器並呼叫 getSelf().getField('translation').getSFVec3f() 與 getSelf().getField('rotation').getSFRotation()。</p>
<p>20. 請說明 Webots 控制器中感測器資料的單位（例如距離感測器、加速度計），以及如何正確解讀。<br/>距離感測器為「原始數值」或距離（m）；加速度計為 m/s²。通常需查閱感測器解析度與最大值後進行換算或校正。</p>
<p>21. 如果想要錄製 Webots 模擬畫面並輸出成影片檔，該如何操作？<br/>可使用 Movie &gt; Start recording 功能錄製影片，完成後匯出為 .mp4 檔；也可透過程式控制使用 Supervisor.movieStartRecording()。</p>
<p>22. Webots 中的 PROTO 文件有什麼作用？與 world 檔（.wbt）的關係為何？<br/>PROTO 是自定義模型的模組化描述檔，可重複使用；.wbt 則為場景實例檔。.wbt 可引用 .proto 來組合機器人與物件。</p>
<p>23. 請說明如何在 Webots 中設定機器人的初始位置和方向。<br/>在世界編輯器中選擇機器人節點，修改 translation 與 rotation 欄位（或使用 Supervisor 控制器程式設定位移）。</p>
<p>24. 在 Tutorial1 或 Tutorial2 中，如何讓機器人執行預設外的自訂動作？<br/>在控制器程式中撰寫額外邏輯（如偵測到某感測值時轉彎），或改變移動策略（速度、方向改變）。</p>
<p>25. Webots 支援哪些主流程控制語言？各有何優缺點？<br/>支援 C、C++、Python、Java、MATLAB。</p>
<p>Python：語法簡潔，適合初學者。</p>
<p>C/C++：效率高，適合複雜任務。</p>
<p>Java：跨平台好，但開發速度慢。</p>
<p>MATLAB：適合數學與控制理論模擬。</p>
<p>26. 機器人控制器程式如何與其他程式（如資料記錄、遠端伺服器）進行通訊？<br/>可使用 socket、HTTP、MQTT 等協定與外部系統通訊；也可寫入資料檔（.csv）以供後續分析。</p>
<p>27. Webots 的模擬世界中燈光和陰影設定如何影響感測器或相機的數據？<br/>光源影響相機與光感測器的輸出。過暗或過亮會導致數據不準，需調整光源位置、強度，或啟用 HDR 模式以穩定輸出。</p>
<p>28. 如何在 Webots 中調整機器人或感測器的物理參數（如質量、摩擦係數）？<br/>編輯 .wbt 或 .proto 中的 Physics 欄位，包括 mass、friction、inertia 等參數，可影響移動與碰撞效果。</p>
<p>29. 請說明如何使用 Webots 的 Console 與 Debug 工具協助程式錯誤排除。<br/>使用 console 輸出 print() 來除錯；也可使用 Webots &gt; View &gt; Console 查看執行錯誤、程式語法錯誤或感測器讀值。</p>
<p>30. Tutorial1、2 裡的機器人遇到物體時，碰撞偵測機制如何運作？<br/>透過距離感測器（如紅外線）量測前方物體距離，不一定產生真實物理碰撞，須搭配感測資料與邏輯設計實現避障。</p>
<p>31. 若要將 Webots 模擬結果導出並進行數據分析，你會選擇哪些方法與工具？<br/>可將感測器資料寫入 CSV 檔，再用 Python（Pandas/Matplotlib）、Excel 或 MATLAB 分析與視覺化。</p><h2>HW2</h2>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW2 - 41023213</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="360" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/fHtE3s7dGk8" title="國立虎尾科技大學 - 機械設計工程系 - cd2025 HW2 - 41023213" width="640"></iframe></p>
<p></p>
<p><span>過程與心得:</span></p>
<p><span>使用solvespace繪製零件<br/>建立solid(1、2)使用cadshape導入base(1、2)零件<br/>建立hingejoint(1、2、3)&gt;solid link(1、2、3)使用cadshape導入link(1、2、3)零件<br/>各連桿都要透過jointparameters定位旋轉軸位置<br/>link1、2、3需要開啟boundingobject pose和physics<br/>建立hingejoint4旋轉軸位置為link3與base連接點<br/>使用solidreference使該旋轉軸導向link3<br/>joint1的device建立motor<br/>使用controller選擇程式導入</span></p>
<p>注意事項與HW1類似，不過零件檔轉為obj後有尺寸、位置、顏色所以在webots中不用再調整</p>
<p><a href="/downloads/HW2_41023213.rar">HW2_41023213</a></p>
<p></p>
<p>相關問題</p>
<p><a href="https://mde.tw/cd2025/content/Stage2.html">https://mde.tw/cd2025/content/Stage2.html</a><span> </span></p>
<p><span>Tutorial3</span><br/>1.Tutorial3 的主要學習目標是什麼？<br/>→ 學會使用地面感測器偵測顏色並控制機器人反應。</p>
<p>2.在 Tutorial3 中，如何讓機器人偵測地面顏色？<br/>→ 使用 ground sensors 並讀取其數值判斷顏色。</p>
<p>3.Ground sensors 在 Webots 裡的作用為何？<br/>→ 用來感測地面反射率，判斷顏色差異。</p>
<p>4.如何在程式中取得 ground sensor 的數值？<br/>→ 使用 getValue() 函數搭配 enable() 啟用感測器。</p>
<p>5.Tutorial3 中的 e-puck 機器人如何根據地面顏色改變行為？<br/>→ 看到黑線就停下或轉彎，其他情況繼續前進。</p>
<p>6.為什麼要對 ground sensor 的數值進行校正（calibration）？<br/>→ 提高準確性，避免誤判地面顏色。</p>
<p>7.如何設定 ground sensor 的 sampling period？<br/>→ 用 enable(timestep) 設定取樣時間。</p>
<p>8.e-puck 機器人可以偵測哪些顏色？如何判斷？<br/>→ 黑與白，透過感測值大小判斷。</p>
<p>9.Tutorial3 如何讓 e-puck 在遇到黑線時做出反應？<br/>→ 判斷感測值低於閾值即停止或轉彎。</p>
<p>10.若地面顏色偵測判斷有誤，可能原因有哪些？<br/>→ 校正不足、光線問題、地圖不清楚。</p>
<p>Tutorial4<br/>1.Tutorial4 的核心任務是什麼？<br/>→ 使用距離感測器讓機器人避開障礙物。</p>
<p>2.如何讓機器人偵測牆壁或障礙物？<br/>→ 透過紅外線距離感測器讀取前方障礙。</p>
<p>3.Webots 的距離感測器（DistanceSensor）如何運作？<br/>→ 根據紅外線反射量決定物體距離。</p>
<p>4.如何在程式中啟用並讀取 DistanceSensor 的數值？<br/>→ 用 enable() 啟用，再用 getValue() 讀取。</p>
<p>5.Tutorial4 中，e-puck 機器人如何實作避障行為？<br/>→ 若偵測到障礙物即調整左右馬達速度改變方向。</p>
<p>6.距離感測器數值的單位是什麼？如何轉換？<br/>→ 無單位，為原始值（0~4096），可依需要對照距離。</p>
<p>7.如何設定距離感測器的 sampling period？<br/>→ 用 enable(timestep) 設定。</p>
<p>8.當機器人同時偵測到左、右兩側有障礙物時，應如何設計行為？<br/>→ 設定優先轉向或原地旋轉。</p>
<p>9.為什麼避障時要考慮多個感測器的數值？<br/>→ 提升準確度，避免單一誤判。</p>
<p>10.Tutorial4 若機器人無法正確避障，可能的解決方法有哪些？<br/>→ 檢查感測器位置、程式邏輯、感測值門檻。</p>
<p><span>Tutorial5</span><br/>1.Tutorial5 的主要內容主題為何？<br/>→ 結合多感測器控制機器人完成多任務行為。</p>
<p>2.如何讓機器人依照不同地面顏色或障礙物狀態做出不同反應？<br/>→ 撰寫條件式依據感測值判斷並執行對應行動。</p>
<p>3.Tutorial5 中如何結合多種感測器進行複雜任務？<br/>→ 同時讀取地面與距離感測器數據進行行為決策。</p>
<p>4.如何設計機器人巡線並同時避障？<br/>→ 主邏輯以巡線為主，遇障礙時進入避障模式。</p>
<p>5.若多種感測器回報衝突訊息，程式該如何決策？<br/>→ 設定感測器優先順序或使用狀態機切換行為。</p>
<p>6.在 Tutorial5 裡，機器人如何完成任務流程的狀態切換？<br/>→ 使用有限狀態機（FSM）根據感測輸入轉換狀態。</p>
<p>7.如何在程式中設計有限狀態機（FSM）？<br/>→ 定義多個狀態與轉換條件，用 if-else 或 switch 控制流程。</p>
<p>8.Tutorial5 的挑戰題目有哪些？如何著手解決？<br/>→ 如巡線+避障，可拆解子任務、定義清楚的狀態流程。</p>
<p>9.若要讓機器人自主完成一個完整路徑的巡邏任務，應加入哪些功能？<br/>→ 路徑追蹤、避障、狀態切換與環境辨識。</p>
<p>10綜合 Tutorial3~5，請說明感測器資料融合（sensor fusion）的意義與應用。<br/>→ 將不同感測器資訊整合，做出更精確決策，提高自主行動能力。</p><h2>HW3</h2>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW3 - 41023213</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="360" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/oW0OhwOVLC8" title="國立虎尾科技大學 - 機械設計工程系 - cd2025 HW3 - 41023213" width="640"></iframe></p>
<p><span>過程與心得:</span></p>
<p><span>使用solvespace繪製零件<br/>建立solid使用cadshape導入base零件<br/>建立hingejoint(1、2、3)&gt;solid link(1、2、3)使用cadshape導入link(1、2、3)零件<br/>link1、2、3分別為press、connector、shooter<br/>各連桿都要透過jointparameters定位旋轉軸位置<br/>建立hingejoint4設定旋轉軸位置<br/>使用solidreference使該旋轉軸導向shooter<br/>建立solid使用cadshape導入stand並建立distancesensor使用cylinder設定感測器位置<br/>建立solid使用shape建立籃球的尺寸位置<br/>建立solid使用cadshape導入floor<br/>各零件設定boundingobject pose或physics<br/>joint1的device建立motor<br/>使用controller選擇程式導入<br/></span></p>
<p>與HW1、2不同的連桿連接方式一開始需要先想一下是怎麼運作的，以及加入了感測器和地板，但我不知道怎麼把球撿回來。</p>
<p><a href="/downloads/HW3_41023213.rar">HW3_41023213</a></p>
<p>相關問題</p>
<p><a href="https://mde.tw/cd2025/content/Stage3.html">https://mde.tw/cd2025/content/Stage3.html</a><span> </span></p>
<p>Tutorial6<br/>1.Tutorial6 的主要學習主題是什麼？<br/>學習如何使用 e-puck 機器人的攝影機進行影像感知與反應控制。</p>
<p>2.在 Tutorial6 中，e-puck 機器人新增了哪些裝置？<br/>新增了 Camera 攝影機裝置。</p>
<p>3.如何在 Webots 中使用攝影機（Camera）？<br/>需在 .wbt 世界檔中加入 Camera 節點，並在程式中啟用。</p>
<p>4.Camera 需要在程式中如何啟用？<br/>透過 Camera.enable(time_step) 指令啟用。</p>
<p>5.如何取得攝影機擷取到的影像資料？<br/>使用 Camera.getImage() 方法取得影像。</p>
<p>6.Tutorial6 中，機器人如何依據攝影機影像做出反應？<br/>根據攝影機辨識到的顏色資訊調整移動方向或行為。</p>
<p>7.Camera 裝置可以調整哪些參數？<br/>解析度、視野角度（FOV）、影像品質等。</p>
<p>8.影像解析度的設定會對模擬有什麼影響？<br/>解析度越高越清晰，但會增加運算負擔與降低模擬速度。</p>
<p>9.如何將攝影機影像儲存成圖片檔？<br/>使用 Camera.saveImage(filename, quality) 方法儲存影像。</p>
<p>10.若攝影機影像顯示異常，可能的原因有哪些？<br/>可能是未啟用攝影機、參數錯誤或程式中讀取錯誤。</p>
<p>Tutorial7<br/>1.Tutorial7 的核心任務是什麼？<br/>讓機器人辨識並追蹤特定顏色物體。</p>
<p>2.在本範例中 e-puck 機器人如何偵測顏色？<br/>透過攝影機擷取影像，再進行影像處理。</p>
<p>3.如何分析攝影機擷取的影像來辨識特定顏色？<br/>轉換為 HSV 色彩空間並設定位元遮罩範圍。</p>
<p>4.OpenCV 或其他影像處理函式庫在 Webots 控制器程式中的應用方式？<br/>導入 OpenCV，利用 cv2.inRange() 等函數篩選顏色。</p>
<p>5.如何將影像中的顏色資訊轉換為機器人行為？<br/>依顏色位置判斷移動方向與速度（如往左或往右轉）。</p>
<p>6.若要辨識多種顏色，程式需考慮哪些步驟？<br/>為每種顏色定義 HSV 範圍並個別處理與判斷。</p>
<p>7.如何解決不同光源下顏色偵測的不穩定問題？<br/>進行自動白平衡、光源補償或標準化顏色範圍。</p>
<p>8.e-puck 機器人如何追蹤影像中的顏色物件？<br/>根據物件在畫面中的位置來調整左右輪速度。</p>
<p>9.若影像中有多個同色物件，程式如何選擇追蹤目標？<br/>通常選擇面積最大或距離最近的物件作為目標。</p>
<p>10.Tutorial7 能否應用於現實世界的機器人？需做哪些調整？<br/>可應用，但需改善光線適應性與使用高解析度相機。</p>
<p>Tutorial8<br/>1.Tutorial8 的主要學習目標是什麼？<br/>學習如何使用 Supervisor 控制模擬流程與管理多機器人。</p>
<p>2.什麼是 Supervisor？在 Tutorial8 扮演什麼角色？<br/>Supervisor 是一種特殊控制器，可存取與操作模擬中其他物件。</p>
<p>3.Supervisor 可以進行哪些操作？<br/>移動機器人、讀取位置、重置模擬、監控行為等。</p>
<p>4.如何在 Supervisor 控制器中存取並控制其他機器人？<br/>使用 getFromDef() 搭配 getField() 取得機器人並進行操作。</p>
<p>5.如何用 Supervisor 監測機器人是否達到目標區域？<br/>監控機器人位置與目標區域位置並比較距離是否足夠近。</p>
<p>6.Supervisor 如何重設模擬或重置機器人位置？<br/>使用 reset() 方法重置模擬；或用 setSFVec3f() 改變座標。</p>
<p>7.Supervisor 能否獲取所有物件的座標與狀態？如何實作？<br/>可以，透過 Node.getPosition() 或 getField() 取得相關資訊。</p>
<p>8.如何紀錄機器人模擬過程的數據供日後分析？<br/>將數據儲存至檔案（如 CSV）或串接資料分析模組。</p>
<p>9.Supervisor 可以如何協助自動化測試機器人行為？<br/>可定時觸發測試腳本、記錄結果、重置模擬多次執行。</p>
<p>10.綜合 Tutorial6~8，請說明感知（感測）、決策（控制器）、監督（Supervisor）三者如何協同運作。<br/>感測器收集資訊，控制器做出反應，Supervisor 管理環境與測試，全體協同達成自主任務。</p><h1>Midterm</h1>
<p>本課程所繳交的期中成績為學員自評之學習期望成績.</p>
<p>期中考週的自評期望成績繳交流程:</p>
<ol>
<li>整理先前所完成的各週的進度、作業網頁內容以及心得</li>
<li>拍攝期中自評影片, 上傳至 Youtube 後, 以"<span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期中自評- 學員學號</span>"為影片標題後嵌入本頁面中</li>
<li>回填期中自評表單</li>
<li>上傳學員期中成績</li>
</ol>
<p>各週進度:</p>
<p>W1 建立倉儲、網站</p>
<p>W2 建立list</p>
<p>學員個人及組別網址list</p>
<p>W3 新增task3檔案</p>
<p>W4 更新list列出連結功能</p>
<p>更新可攜wscite</p>
<p><span>建立task1</span></p>
<p><span>採用C: 中的 Python 3.11 舊系統自製 Python 3.13.2 為主的新可攜程式環境</span></p>
<p>W5 Webots 四連桿設計</p>
<p><span>設定Webots在可攜中開啟</span></p>
<p><span>W6 Webots投籃機</span></p>
<p><span>W7 Webots 四連桿練習</span></p>
<p><span>W8 Webots CAD四連桿練習</span></p>
<p><span>W9 HW1、HW2、期中自評</span><span>製作</span></p>
<p><span>W10 填表單、SolidReference兩種用法</span></p>
<p><span>W11 投籃機練習</span></p>
<p>W12 HW1~3表單與更新</p>
<p>W13 exam1、2、3更新</p>
<p>W14 exam3更新+檔案上傳</p>
<p>W15 w15模擬練習</p>
<p>W16 HW製作細節問答</p>
<p>W17 製作final</p>
<p>各週網頁內容:</p>
<p>期中心得:</p>
<p>期中自評影片:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="360" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/WyP9WdhKgr8" title="國立虎尾科技大學 - 機械設計工程系 - cd2025 期中自評- 41023213" width="640"></iframe></p>
<p></p>
<p style="padding-left: 30px;"></p><h1>Exam</h1>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p style="padding-left: 30px;">各學員利用 Webots R2025a 套件中的 Shape 物件, 隨堂建立指定的機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景 </p>
<p style="padding-left: 30px;">各學員利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p style="padding-left: 30px;">各分組利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. 過程中各學員必須採同步協同模式, 維護從 Github Classroom 取得的分組協同倉儲以及網站.</p>
<p style="padding-left: 30px;">協同分組方式:</p>
<ol>
<li>分配學員負責利用 Solvespace 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 NX2312 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 Webots 建立機電系統模擬場景, 並利用 Python 程式進行控制, 過程中必須將建構過程拍成帶有說明字幕的影片上傳至分組網頁.</li>
</ol>
<h2>Exam1</h2>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam1 - 41023213</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="360" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/EjtbllBaLX8" title="國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam1 - 41023213" width="640"></iframe></p>
<p>1.以Robot為基礎建立base與link1的hingejoint</p>
<p>2. base長度為1 厚度寬度皆為0.1</p>
<p>3. joint1位置位置-0.5 0 0<br/>    link1位置-0.5 0 0.1 pose位置0.2 0 0 角度0.226(13度) 長度0.4</p>
<p>4. joint2位置0.4 0 0<br/>    link2位置0.4 0 0.1 pose位置0.3 0 0 角度1.291 長度0.6<br/>    link2短軸pose位置0.3 0.15 0 長度0.3</p>
<p>5.joint3位置0.6 0 0<br/>   link3位置0.6 0 -0.1 pose位置0.45 0 0 角度2.391 長度0.9</p>
<p>6.joint4位置0.9 0 0 solidreference接static environment</p>
<p>7.link1 2 3 啟用boundingobject pose 跟 physics</p>
<p>8.link1 device啟用rotationalmotor</p>
<p>9.controller加入程式</p>
<p><img alt="" height="366" src="/images/exam1.png" width="442"/></p>
<p><span>連桿旋轉角度為13度時的Solvespace線架構圖</span></p>
<p><span></span></p>
<p>心得:與HW1大致相同，多了起始角度的變化，需要將要求的角度轉換為rad</p>
<p><a href="/downloads/Exam1_41023213.rar">Exam1_41023213</a></p><h2>Exam2</h2>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam2 - 41023213</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="360" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/VcJs-kMppVI" title="國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam2 - 41023213" width="640"></iframe></p>
<p>1.以solidworks繪製base和link長度分別為1.13 2.5 3 m<br/>   再組合圖中組合並調整初始角度為13<br/>   轉存為stl檔</p>
<p>2.匯入blender調整link1起始點歸零加入外觀顏色並以obj匯出</p>
<p>3.以Robot為基礎建立base與link1的hingejoint</p>
<p>4.base1、2分別匯入cad</p>
<p>5.joint1位置x:0mm y:0mm z:0mm<br/>   link1匯入cad</p>
<p>6.joint2位置x:1101.01mm y:254.19mm z:0mm<br/>   link2匯入cad</p>
<p>7.joint3位置x:1669.34mm y:2688.74mm z:0mm<br/>   link3匯入cad</p>
<p>8.joint4位置x:3000mm y:0mm z:0mm<br/>   solidreference接static environment</p>
<p>9.link1 2 3 啟用boundingobject pose 跟 physics</p>
<p>   link1 device啟用rotationalmotor</p>
<p>10.controller加入程式</p>
<p></p>
<p>心得:與HW2的起始角度不同但不用像exam1一樣在webots中調整角度因為cad已經調整好，但joint位置還是要設定</p>
<p><a href="/downloads/Exam2_41023213.rar">Exam2_41023213</a></p><h2>Exam3</h2>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3 - 41023213</p>
<p>Exam3-1</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="360" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/v2HxM5br-gc" title="國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3-1 - 41023213" width="640"></iframe></p>
<p>Exam3-2 </p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="360" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/bK8hh3OlsDQ" title="國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3-2 - 41023213" width="640"></iframe></p>
<p><span><a href="/downloads/Exam3-2_41023213.rar">Exam3-2_41023213</a></span></p>
<p><span>Exam3-3</span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="360" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/Qek8KV_KRro" title="國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3-3 - 41023213" width="640"></iframe></p>
<p>  <a href="/downloads/Exam3-3_41023213.rar">Exam3-3_41023213</a></p>
<p></p><h1>Final</h1>
<p><span>期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%)</span></p>
<p><span>題目: <span style="background-color: #ccffcc;">Webots 動態投籃模擬系統的協同設計</span></span></p>
<p>影片標題: <span>國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 41023213 - 製作過程</span><span style="background-color: #ffff00;"><br/></span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="360" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/DmA9fziL1iM" title="國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 41023213 - 製作過程" width="640"></iframe></p>
<p><span>影片標題: </span><span>國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 41023213 - <span>操作過程</span></span><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="360" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/O_BnjoaBmOM" title="國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 41023213 - 操作過程" width="640"></iframe></p>
<p><span><a href="/downloads/final.rar">41023213_final</a></span></p>
<p><iframe frameborder="0" height="288px" src="https://1drv.ms/p/s!AvoTOLcuNkgKgQlmmrvU2-xHiqTt?embed=1&amp;em=2&amp;wdAr=1.7777777777777777" width="476px">這是 <a href="https://office.com/webapps" target="_blank">Office</a> 提供的內嵌 <a href="https://office.com" target="_blank">Microsoft Office</a> 簡報。</iframe></p>
<p><a href="https://nfuedu-my.sharepoint.com/:b:/g/personal/41023213_nfu_edu_tw/EYRIvSJ6ZX1CoyObA7cgkdUBYOMzaamIRborvTv81hWy6w">期末報告PDF</a></p>
<p><span><a href="https://nfuedu-my.sharepoint.com/:p:/g/personal/41023213_nfu_edu_tw/EQmb942BGxpCoMkTMTaVOzIBYGhpvM41T8qB6lEgruaQzQ">期末報告ppt</a></span></p>
<p><span><a href="/downloads/final協同產品設計實習.pdf">期末報告</a></span></p><h1>Brython</h1>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>